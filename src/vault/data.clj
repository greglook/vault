(ns vault.data
  "Code to handle structured data, usually represented as EDN."
  (:require
    [clojure.string :as string]
    [fipp.printer :refer [pprint-document]]
    [puget.printer :as puget]))


(def ^:private ^:const blob-width
  "Width of text to use in serialized blobs."
  100)


; TODO: should this be a multimethod? byte arrays can be serialized 'raw'
; and other structures can be printed canonically.
(defn edn-blob
  "Returns a canonical EDN representation suitable for serializing to a blob."
  [value]
  (let [doc (binding [puget/*colored-output* false
                      puget/*strict-mode* true]
              (puget/canonize value))
        doc (if (puget/tagged-value-doc? doc)
              (let [[op tag sep & more] doc]
                `[~op ~tag :line ~@more])
              doc)]
    (-> doc
        (pprint-document {:width blob-width})
        with-out-str
        string/trim)))


; PROBLEM:
; An indexer is given a blob to index. From just the byte content, how can the
; indexer tell (1) whether the blob has EDN content and (2) what type of data
; does the content represent?
;
; IDEAS:
; In some cases, the blob will be EXPECTED to contain EDN data, such as if a
; content-type header specifies "application/edn", or if the value was linked
; by another piece of data.
;
; From experiments trying to read randomly-generated byte sequences as EDN, if
; the reader either throws an exception or returns a symbol, it's not a valid
; EDN data blob.


; PROBLEM:
; Inline signatures need to sign the bytes which form the "primary value" in an
; EDN data blob.
;
; IDEAS:
; Write middle-layer proxy for InputStream or PushbackReader to capture bytes
; from the beginning of the blob to one value read from the EDN reader.


(def data-readers
  {'bin puget/read-bin
   'uri puget/read-uri})


(defn read-blob
  "Reads the given input stream and attempts to parse it as an EDN data
  structure. If the data is not EDN, it returns a byte array of the blob
  contents."
  [input]
  ; TODO: write blob data reader which either returns the parsed data structure
  ; or some indication that it's raw byte data.
  nil)
